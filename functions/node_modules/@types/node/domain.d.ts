/**
 * **This module is pending deprecation.** Once a replacement API has been
 * finalized, this module will be fully deprecated. Most developers should
 * **not** have cause to use this module. Users who absolutely must have
 * the functionality that domains provide may rely on it for the time being
 * but should expect to have to migrate to a different solution
 * in the future.
 *
 * Domains provide a way to handle multiple different IO operations as a
 * single group. If any of the event emitters or callbacks registered to a
 * domain emit an `'error'` event, or throw an error, then the domain object
 * will be notified, rather than losing the context of the error in the `process.on('uncaughtException')` handler, or causing the program to
 * exit immediately with an error code.
 * @deprecated Since v1.4.2 - Deprecated
 * @see [source](https://github.com/nodejs/node/blob/v24.x/lib/domain.js)
 */
declare module "domain" {
    import EventEmitter = require("node:events");
    /**
     * The `Domain` class encapsulates the functionality of routing errors and
     * uncaught exceptions to the active `Domain` object.
     *
     * To handle the errors that it catches, listen to its `'error'` event.
     */
    class Domain extends EventEmitter {
        /**
         * An array of timers and event emitters that have been explicitly added
         * to the domain.
         */
        members: Array<EventEmitter | NodeJS.Timer>;
        /**
         * The `enter()` method is plumbing used by the `run()`, `bind()`, and `intercept()` methods to set the active domain. It sets `domain.active` and `process.domain` to the domain, and implicitly
         * pushes the domain onto the domain
         * stack managed by the domain module (see {@link exit} for details on the
         * domain stack). The call to `enter()` delimits the beginning of a chain of
         * asynchronous calls and I/O operations bound to a domain.
         *
         * Calling `enter()` changes only the active domain, and does not alter the domain
         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a
         * single domain.
         */
        enter(): void;
        /**
         * The `exit()` method exits the current domain, popping it off the domain stack.
         * Any time execution is going to switch to the context of a different chain of
         * asynchronous calls, it's important to ensure that the current domain is exited.
         * The call to `exit()` delimits either the end of or an interruption to the chain
         * of asynchronous calls and I/O operations bound to a domain.
         *
         * If there are multiple, nested domains bound to the current execution context, `exit()` will exit any domains nested within this domain.
         *
         * Calling `exit()` changes only the active domain, and does not alter the domain
         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a
         * single domain.
         */
        exit(): void;
        /**
         * Run the supplied function in the context of the domain, implicitly
         * binding all event emitters, timers, and low-level requests that are
         * created in that context. Optionally, arguments can be passed to
         * the function.
         *
         * This is the most basic way to use a domain.
         *
         * ```js
         * import domain from 'node:domain';
         * import fs from 'node:fs';
         * const d = domain.create();
         * d.on('error', (er) => {
         *   console.error('Caught error!', er);
         * });
         * d.run(() => {
         *   process.nextTick(() => {
         *     setTimeout(() => { // Simulating some various async stuff
         *       fs.open('non-existent file', 'r', (er, fd) => {
         *         if (er) throw er;
         *         // proceed...
         *       });
         *     }, 100);
         *   });
         * });
         * ```
         *
         * In this example, the `d.on('error')` handler will be triggered, rather
         {"responseContext":{"serviceTrackingParams":[{"service":"GFEEDBACK","params":[{"key":"is_alc_surface","value":"false"},{"key":"ipcc","value":"0"},{"key":"is_viewed_live","value":"False"},{"key":"wh_paused","value":"0"},{"key":"logged_in","value":"0"},{"key":"e","value":"23804281,23943652,24004644,24077241,24166867,24181174,24290153,24425061,24566687,39328892,51010235,51020570,51025415,51037346,51037349,51063643,51089007,51098299,51115184,51152050,51174143,51178314,51178337,51178340,51178355,51183909,51193717,51204329,51222973,51227037,51237842,51242448,51256074,51303432,51311027,51311034,51313109,51313767,51340662,51341226,51342504,51342857,51349914,51353393,51354083,51354569,51355199,51359179,51361830,51362040,51366125,51366423,51367489,51372971,51375205,51386464,51386540,51389629,51397095,51397332,51404808,51404810,51407629,51414985,51432529,51432560,51432631,51433501,51435845,51435879,51435884,51435893,51435907,51435910,51435918,51437205,51439005,51440725,51441710,51443158,51447191,51448334,51452420,51452481,51452495,51456423,51456629,51458626,51459425,51460090,51466155,51467525,51468322,51471144,51471743,51472817,51473810,51475688,51476897,51477494,51478690,51478867,51479906,51481409,51481986,51483631,51484222,51488778,51489588,51490157,51490224,51490331,51491753,51492548,51492930,51492990,51494655,51496969,51500050,51500153,51505436,51505736,51506681,51508739,51508979,51509315,51509543,51509613,51509652,51509706,51509830,51509858,51509946,51510596,51510638,51510814,51511503,51511950,51512708,51512852,51513086,51513770,51514683,51515823,51516746,51517140,51517758,51518123,51518179,51518806,51518819,51519341,51519754,51519959,51520230,51520346,51520576,51522681,51523770,51524091,51524094,51524505,51525411,51526397,51526691,51526700,51527051,51528541,51528610,51528847,51528905,51529397,51529759,51529906,51531368,51532519,51533386,51533391,51533396,51533403,51533568,51533715,51533800,51534328,51534335,51534338,51534349,51534352,51534361,51535068,51537812,100670016"}]}],"maxAgeSeconds":0},"playabilityStatus":{"status":"OK","playableInEmbed":true,"audioOnlyPlayability":{"audioOnlyPlayabilityRenderer":{"trackingParams":"CAEQx2kiEwiAlsvmsqKOAxXkpawCHbcLFdw=","audioOnlyAvailability":"FEATURE_AVAILABILITY_ALLOWED"}},"miniplayer":{"miniplayerRenderer":{"playbackMode":"PLAYBACK_MODE_ALLOW","enableStashedPlayback":false}},"contextParams":"Q0FFU0FnZ0M="},"streamingData":{"expiresInSeconds":"21540","formats":[{"itag":18,"url":"https://rr6---sn-gvcp5mp5u5-jb2l.googlevideo.com/videoplayback?expire=1751625979&ei=m1xnaMDcGuTLssUPt5fU4A0&ip=202.134.10.130&id=o-AFjLfVfvgKYGJJjNus6IF6yd942hhsETdBKS8xA-eeTk&itag=18&source=youtube&requiressl=yes&xpc=EgVo2aDSNQ%3D%3D&met=1751604379%2C&mh=pM&mm=31%2C29&mn=sn-gvcp5mp5u5-jb2l%2Csn-npoldn76&ms=au%2Crdu&mv=m&mvi=6&pl=24&rms=au%2Cau&initcwndbps=476250&bui=AY1jyLMXlj3tGujYyp4tGy-1LmbA-s7H6znDjuyxAeCTkfCjRbH6wnMBIE8It6XyQetKQfiBSXjH9wIL&vprv=1&svpuc=1&mime=video%2Fmp4&ns=-jDajzhz24pYOBAW6CLZ3BoQ&rqh=1&gir=yes&clen=909120&ratebypass=yes&dur=12.117&lmt=1751550716699021&mt=1751603804&fvip=3&lmw=1&c=TVHTML5&sefc=1&txp=5430534&n=WDxNvQ-F1SHLmdVczl&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cxpc%2Cbui%2Cvprv%2Csvpuc%2Cmime%2Cns%2Crqh%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&sig=AJfQdSswRQIga2g5VgyWIXmlsEscN52QgWlxqwJ7BkDO4tTPMJPrfekCIQCdJZVvrkCaqm9Lw0n-YvpIU28tCyLo27ejD5XyUcFGFQ%3D%3D&lsparams=met%2Cmh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Crms%2Cinitcwndbps&lsig=APaTxxMwRgIhAN9VFhXNlc_UvlzOSCVRWfGf9rJdDxYCmcew_WKOV4d-AiEA4-EAxapw1dQsoa0qC-fB7sPWb2o2OLC8Mmg1-neupmM%3D","mimeType":"video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"","bitrate":605524,"width":360,"height":640,"lastModified":"1751550716699021","contentLength":"909120