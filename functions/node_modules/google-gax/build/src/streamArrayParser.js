"use strict";
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamArrayParser = void 0;
const abort_controller_1 = require("abort-controller");
const stream_1 = require("stream");
const fallbackRest_1 = require("./fallbackRest");
const featureDetection_1 = require("./featureDetection");
class StreamArrayParser extends stream_1.Transform {
    /**
     * StreamArrayParser processes array of valid JSON objects in random chunks
     * through readable stream, and produces a stream of plain Javascript objects
     * where it converted from the corresponding protobuf message instance.
     *
     * The default JSON parser decodes the input stream under the
     * following rules:
     *  1. The stream represents a valid JSON array (must start with a "[" and
     * close with the corresponding "]"). Each element of this array is assumed to
     * be either an array or an object, and will be decoded as a JS object and
     *    delivered.
     *  2. All JSON elements in the buffer will be decoded and delivered in a
     * stream.
     *
     * @private
     * @constructor
     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.
     * @param {Object} options - the options pass to Transform Stream. See more
     * details
     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.
     */
    constructor(rpc, options) {
        super(Object.assign({}, options, { readableObjectMode: true }));
        this._done = false;
        this._prevBlock = Buffer.from('');
        this._isInString = false;
        this._isSkipped = false;
        this._level = 0;
        this.rpc = rpc;
        this.cancelController = (0, featureDetection_1.hasAbortController)()
            ? new AbortController()
            : new abort_controller_1.AbortController();
        this.cancelSignal = this.cancelController.signal;
        this.cancelRequested = false;
    }
    _transform(chunk, _, callback) {
        let objectStart = 0;
        let curIndex = 0;
        if (this._level === 0 && curIndex === 0) {
            if (String.fromCharCode(chunk[0]) !== '[') {
                this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));
            }
            curIndex++;
            this._level++;
        }
        while (curIndex < chunk.length) {
            const curValue = String.fromCharCode(chunk[curIndex]);
            if (!this._isSkipped) {
                switch (curValue) {
                    case '{':
                        // Check if it's in string, we ignore the curly brace in string.
                        // Otherwise the object level++.
                        if (!this._isInString) {
                            this._level++;
                        }
                        if (!this._isInString && this._level === 2) {
                            objectStart = curIndex;
                        }
                        break;
                    case '"':
                        // Flip the string status
                        this._isInString = !this._isInString;
                        break;
                    case '}':
                        // check if it's in string
                        // if true, do nothing
                        // if false and level = 0, push data
                        if (!this._isInString) {
                          01 01 01 01 01 01 
01 01 01 01 01 01 38 36 80 A0 70 38 20 40 18 30 
3C 00 26 A5 10 00 00 19 00 00 00 FE 00 4D 31 33 
33 4E 56 46 43 20 52 35 20 0A 00 00 00 03 00 03 
26 A2 04 2C 5C 12 08 07 AF 00 00 00 00 00 00 03 
00 19 51 FF 64 A0 F4 12 08 30 F4 01 01 00 00 E9 
^
[00:00:00:11:608:048] [Conn_PHY_SIZE]	[EDP-1]  [X Dim:290mm, Y Dim:170mm]
^
[00:00:00:11:608:057] [Conn_native_mode]	[EDP-1] {1920x1080@60Hz}
^
[00:00:00:11:608:065] [Conn_Stereo3D_support]	[EDP-1] - Stereo3D:0
^
[00:00:00:11:608:076] [Conn_DSC_Caps]	[EDP-1] DSC Support: NO
^
[00:00:00:11:608:086] [Conn_eDP_Supported_Link_Rates]	[EDP-1] - Count:8 - Supported Link Rates: 1.62 2.16 2.43 2.70 3.24 Unknown 4.32 5.40 Gbps
^
[00:00:00:11:608:095] [Conn_eDP_PSR_Info]	[EDP-1]
PSR Version: 1
Link Training On Exit Not Required: False
PSR Setup Time: 0
Y Coordinate Required: True
SU Granularity Required: False
Frame Sync Is Not Needed For SU: False
PSR2 SU Y Granularity Cap: 0
Force PSR SU Cap: 0
^
[00:00:00:11:608:104] [Conn_Cable_ID]	[EDP-1] - Cable ID: 0x0 
^
[00:00:00:11:638:105] [Conn_Num_Display]	 0
^
[00:00:00:11:808:396] [Varibright_State]	[EDP-1] - Supported: True - ABM Version: 0x23
^
[00:00:00:11:808:413] [Conn_DP_Data]	[EDP-1] - Reported Link Rate: HBR2 - DP1.4 - Lanes: 2 
^
[00:00:00:11:808:421] [Conn_Color_Depth_Caps]	[EDP-1] - Supported Color Depths: 8 6 bpc
^
[00:00:00:11:808:432] [Conn_Disp_Cap_HDR_Metadata_Colorimetry] - Area[1121021451] - R[63964,32910] - G[29980,59960] - B[14941,5957] - WP[31250,32812]
^
[00:00:00:11:808:441] [Conn_Edid_Block_Type]	[EDP-1] EDID blocks: 1 Edid14Base
^
[00:00:00:11:808:511] [Conn_Detect]	[EDP-1] DDC Display: [EDID Block 0] 

00 FF FF FF FF FF FF 00 26 CF 7D 85 00 00 00 00 
00 1D 01 04 A5 1D 11 78 0A DE 50 A3 54 4C 99 26 
0F 50 54 00 00 00 01 01 01 01 01 01 01 01 01 01 
01 01 01 01 01 01 38 36 80 A0 70 38 20 40 18 30 
3C 00 26 A5 10 00 00 19 00 00 00 FE 00 4D 31 33 
33 4E 56 46 43 20 52 35 20 0A 00 00 00 03 00 03 
26 A2 04 2C 5C 12 08 07 AF 00 00 00 00 00 00 03 
00 19 51 FF 64 A0 F4 12 08 30 F4 01 01 00 00 E9 
00 00 00 00 00 00