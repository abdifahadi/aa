tion: 'FLUTTER_NOTIFICATION_CLICK',
          sound: 'default', // Use default sound for notification
        },
        data: {
          type: 'call',
          callId: context.params.callId,
          callerId: callerId,
          callerName: callerName || 'Unknown',
          callerPhotoUrl: callerPhotoUrl || '',
          callType: type || 'audio',
          channelId: channelId,
          token: token || '',
          timestamp: new Date().getTime().toString(),
          click_action: 'FLUTTER_NOTIFICATION_CLICK',
        },
        android: {
          priority: 'high',
          notification: {
            channelId: 'abdi_wave_calls',
            icon: 'notification_icon',
            priority: 'high',
            sound: 'default',
            // Use full screen intent for calls
            visibility: 'public',
          },
        },
        apns: {
          payload: {
            aps: {
              contentAvailable: true,
              sound: 'default',
              // Use critical alerts for calls
              category: 'call',
            },
          },
        },
      };
      
      console.log(`Sending call notification to user: ${receiverId}`);
      
      // Send notification to all tokens
      const result = await admin.messaging().sendMulticast({
        tokens: fcmTokens,
        notification: payload.notification,
        data: payload.data,
        android: payload.android,
        apns: payload.apns,
      });
      
      console.log(`Successfully sent ${result.successCount} call notifications, failed: ${result.failureCount}`);
      
      return null;
    } catch (error) {
      console.error('Error sending call notification:', error);
      return null;
    }
  });

// Update call status when a call is updated
exports.handleCallStatusUpdate = functions.firestore
  .document('calls/{callId}')
  .onUpdate(async (change, context) => {
    try {
      const beforeData = change.befor